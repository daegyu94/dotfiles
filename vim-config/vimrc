set fileencodings=utf-8,euckr
set nocompatible " no compatible to original vi 
set autoindent
set cindent
set smartindent
set wrap " set automatic line wrapping for lines exceeding the textwidth
set nowrapscan " do not return to the beginning from the end of the document
set nobackup
set noswapfile
set ruler " current cursor
set shiftwidth=4 " auto indent
set tabstop=4
set number " line number
set smarttab " make <tab> and <backspace> smarter
set lbr " linebreak by word
set hlsearch
set incsearch " search for each character
set cursorline
set colorcolumn=81 " higlight column right after max textwidth
set laststatus=2 " set whether or not to display the status line in the last window
syntax on
set backspace=eol,start,indent
set history=1000 " cmd history
set t_Co=256

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/syntastic'
Plugin 'airblade/vim-gitgutter'
Plugin 'scrooloose/nerdtree'
Plugin 'AutoComplPop'
Plugin 'majutsushi/tagbar'
Plugin 'vim-airline/vim-airline'
Plugin 'flazz/vim-colorschemes'
Plugin 'Valloric/YouCompleteMe'
call vundle#end()

filetype plugin indent on
autocmd FileType c,cc,cpp,h,hpp setlocal ts=4 sw=4 sts=4 expandtab smartindent
autocmd FileType sh,yaml,xml,java setlocal ts=2 sw=2 sts=2 expandtab smartindent

colorscheme codedark

"Nerdtree
nmap <F7> :NERDTree<CR>

"ctags
set tags=./tags,tags
set tagbsearch
nmap <F8> :TagbarToggle<CR>

"cscope
set csprg=/usr/bin/cscope
set csto=0
set cst
set nocsverb

if filereadable("./cscope.out")
  cs add cscope.out
else
  cs add /usr/src/linux/cscope.out
endif
set csverb

"cscope autoloading
function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  " else add the database pointed to by environment variable 
  elseif $CSCOPE_DB != "" 
    cs add $CSCOPE_DB
  endif
endfunction
au BufEnter /* call LoadCscope()

" cscope/vim key mappings
" 's' symbol: find all references to the token under cursor
" 'g' global: find global definition(s) of the token under cursor
" 'c' calls:  find all calls to the function name under cursor
" 't' text:   find all instances of the text under cursor
" 'e' egrep:  egrep search for the word under cursor
" 'f' file:   open the filename under cursor
" 'i' includes: find files that include the filename under cursor
" 'd' called: find functions that function under cursor calls

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>i :cs find i <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
